{"version":3,"sources":["components/Navbar.tsx","Layout.tsx","components/pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable.tsx","components/PeopleFilters.tsx","types/SortType.ts","components/pages/PeoplePage.tsx","utils/filteredPeople.tsx","components/pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","Layout","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","name","sex","born","died","fatherName","motherName","slug","father","mother","urlSlug","useParams","getClassByGender","gender","getParentsInfo","parentName","personFromData","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleTable","people","sortParam","get","orderParam","getSearchParams","field","newOrder","sort","order","getSortClass","changeSort","map","PeopleFilters","setSearchParams","query","centuries","getAll","toggleCenturies","century","includes","filter","number","type","placeholder","onChange","event","target","length","SortType","PeoplePage","useState","peopleFromServer","setPeopleFromServer","isLoading","setIsLoading","errorMessage","setErrorMessage","isResponseSuccessfull","preparedPeopleData","preparedPeople","find","filterPeople","useMemo","normalizedQuery","trim","toLowerCase","Math","ceil","person1","person2","Name","Sex","localeCompare","Born","Died","reverse","filteredPeople","useEffect","getPeople","catch","finally","NotFoundPage","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.55a3fbe9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item', {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './Layout.scss';\n\nexport const Layout = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    father,\n    mother,\n  } = person;\n\n  const { slug: urlSlug } = useParams();\n\n  const getClassByGender = (gender: string) => {\n    return classNames({\n      'has-text-danger': gender === 'f',\n    });\n  };\n\n  const getParentsInfo = (\n    parentName: string | null,\n    personFromData: Person | undefined,\n  ) => {\n    if (parentName && personFromData) {\n      return (\n        <Link\n          to={`${personFromData.slug}`}\n          className={getClassByGender(personFromData.sex)}\n        >\n          {parentName}\n        </Link>\n      );\n    }\n\n    if (parentName) {\n      return `${parentName}`;\n    }\n\n    return '-';\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === urlSlug,\n      })}\n    >\n      <td>\n        <Link to={`${slug}`} className={getClassByGender(sex)}>\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>{getParentsInfo(motherName, mother)}</td>\n      <td>{getParentsInfo(fatherName, father)}</td>\n    </tr>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sortParam = searchParams.get('sort') || null;\n  const orderParam = searchParams.get('order') || null;\n\n  const getSearchParams = (field: string) => {\n    const newSort = sortParam === field && orderParam === 'desc'\n      ? null\n      : field;\n\n    let newOrder = null;\n\n    if (sortParam === field) {\n      newOrder = orderParam\n        ? null\n        : 'desc';\n    }\n\n    const newParams = {\n      sort: newSort,\n      order: newOrder,\n    };\n\n    return newParams;\n  };\n\n  const getSortClass = (changeSort: string) => {\n    return classNames('fas', {\n      'fa-sort': sortParam !== changeSort,\n      'fa-sort-up': sortParam === changeSort && orderParam !== 'desc',\n      'fa-sort-down': sortParam === changeSort && orderParam === 'desc',\n    });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={getSearchParams('name')}\n              >\n                <span className=\"icon\">\n                  <i className={getSortClass('name')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={getSearchParams('sex')}\n              >\n                <span className=\"icon\">\n                  <i className={getSortClass('sex')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={getSearchParams('born')}\n              >\n                <span className=\"icon\">\n                  <i className={getSortClass('born')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={getSearchParams('died')}\n              >\n                <span className=\"icon\">\n                  <i className={getSortClass('died')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <PersonLink person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuries = searchParams.getAll('centuries') || [];\n  const allCenturies = ['16', '17', '18', '19', '20'];\n\n  function toggleCenturies(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter((number) => number !== century)\n      : [...centuries, century];\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({\n            'is-active': !sex,\n          })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map((century) => (\n              <SearchLink\n                params={{ centuries: toggleCenturies(century) }}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                key={century}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            sex: null,\n            centuries: null,\n            query: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","export enum SortType {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { PeopleTable } from '../PeopleTable';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { filteredPeople } from '../../utils/filteredPeople';\n\nexport const PeoplePage = () => {\n  const [peopleFromServer, setPeopleFromServer]\n    = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || '';\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const isResponseSuccessfull = peopleFromServer && !isLoading && !errorMessage;\n\n  const preparedPeopleData = (people: Person[]) => {\n    const preparedPeople = people.map(person => {\n      let mother;\n      let father;\n\n      if (person.motherName) {\n        mother = people.find(({ name }) => person.motherName === name);\n      }\n\n      if (person.fatherName) {\n        father = people.find(({ name }) => person.fatherName === name);\n      }\n\n      return { ...person, mother, father };\n    });\n\n    setPeopleFromServer(preparedPeople);\n  };\n\n  const filterPeople = useMemo(() => {\n    return filteredPeople(peopleFromServer, {\n      query,\n      centuries,\n      sex,\n      sort,\n      order,\n    });\n  }, [peopleFromServer, query, centuries, sex, sort, order]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(preparedPeopleData)\n      .catch(() => {\n        setErrorMessage('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {isResponseSuccessfull && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {errorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {errorMessage}\n                </p>\n              )}\n\n              {/* eslint-disable no-extra-boolean-cast */}\n              {isResponseSuccessfull\n                && (!!peopleFromServer.length ? (\n                  <PeopleTable people={filterPeople} />\n                ) : (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                ))}\n\n              {!!peopleFromServer.length && filterPeople.length === 0 && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { Filter } from '../types/Filter';\nimport { SortType } from '../types/SortType';\n\nexport const filteredPeople = (people: Person[], {\n  query = '',\n  centuries = [],\n  sex = '',\n  order = 'asc',\n  sort = '',\n}: Filter): Person[] => {\n  let preparedPeople = [...people];\n\n  const normalizedQuery = query.trim().toLowerCase();\n\n  if (normalizedQuery) {\n    preparedPeople = preparedPeople.filter(\n      (person) => person.name.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (centuries.length) {\n    preparedPeople = preparedPeople.filter((person) => centuries\n      .includes(Math.ceil(person.born / 100).toString()));\n  }\n\n  if (sex) {\n    preparedPeople = preparedPeople.filter((person) => person.sex === sex);\n  }\n\n  if (sort) {\n    preparedPeople = preparedPeople.sort((person1, person2) => {\n      switch (sort) {\n        case SortType.Name:\n        case SortType.Sex:\n          return person1[sort].localeCompare(person2[sort]);\n\n        case SortType.Born:\n        case SortType.Died:\n          return person1[sort] - person2[sort];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === 'desc') {\n    preparedPeople.reverse();\n  }\n\n  return preparedPeople;\n};\n","export const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n","import {\n  HashRouter as Router, Route, Routes, Navigate,\n} from 'react-router-dom';\nimport { Layout } from './Layout';\nimport { HomePage } from './components/pages/HomePage';\nimport { PeoplePage } from './components/pages/PeoplePage';\nimport { NotFoundPage } from './components/pages/NotFoundPage';\n\nexport const App = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<Layout />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <App />,\n  );\n"],"sourceRoot":""}